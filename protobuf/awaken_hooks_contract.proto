syntax = "proto3";

import "aelf/core.proto";
import "aelf/options.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/timestamp.proto";
import "acs12.proto";

option csharp_namespace = "Awaken.Contracts.Hooks";

service AwakenHooksContract {
  option (aelf.csharp_state) = "Awaken.Contracts.Hooks.AwakenHooksContractState";
  option (aelf.base) = "acs12.proto";

  rpc Initialize (InitializeInput) returns (google.protobuf.Empty) {
  }
  rpc SetAdmin (aelf.Address) returns (google.protobuf.Empty) {
  }
  rpc CreatePair (CreatePairInput) returns (google.protobuf.Empty) {
  }
  rpc AddLiquidity (AddLiquidityInput) returns (google.protobuf.Empty) {
  }
  rpc RemoveLiquidity (RemoveLiquidityInput) returns (google.protobuf.Empty) {
  }
  rpc SwapExactTokensForTokens (SwapExactTokensForTokensInput) returns (google.protobuf.Empty) {
  }
  rpc SwapTokensForExactTokens (SwapTokensForExactTokensInput) returns (google.protobuf.Empty) {
  }
  rpc AddSwapContractInfo (AddSwapContractInfoInput) returns (google.protobuf.Empty) {
  }
  rpc RemoveSwapContractInfo (RemoveSwapContractInfoInput) returns (google.protobuf.Empty) {
  }
  rpc SetLimitOrderConfig(SetLimitOrderConfigInput) returns (google.protobuf.Empty) {
  }
  rpc SetOrderContract(aelf.Address) returns (google.protobuf.Empty) {
  }
  rpc SetLabsFeeRate (google.protobuf.Int64Value) returns (google.protobuf.Empty) {
  }
  rpc SetLabsFeeTo (aelf.Address) returns (google.protobuf.Empty) {
  }
  
  // View
  rpc GetSwapContractList (google.protobuf.Empty) returns (GetSwapContractListOutput) {
    option (aelf.is_view) = true;
  }
  rpc GetAdmin (google.protobuf.Empty) returns (aelf.Address) {
    option (aelf.is_view) = true;
  }
  rpc GetAmountsOut (GetAmountsOutInput) returns (GetAmountsOutOutput) {
    option (aelf.is_view) = true;
  }
  rpc GetAmountsIn (GetAmountsInInput) returns (GetAmountsInOutput) {
    option (aelf.is_view) = true;
  }
  rpc GetAllReverse (GetAllReverseInput) returns (GetAllReverseOutput) {
    option (aelf.is_view) = true;
  }
  rpc GetLimitOrderConfig(google.protobuf.Empty) returns (GetLimitOrderConfigOutput) {
    option (aelf.is_view) = true;
  }
  rpc GetOrderContract(google.protobuf.Empty) returns (aelf.Address) {
  }
  rpc GetLabsFeeTo (google.protobuf.Empty) returns (aelf.Address) {
    option (aelf.is_view) = true;
  }
  rpc GetLabsFeeRate (google.protobuf.Empty) returns (google.protobuf.Int64Value) {
    option (aelf.is_view) = true;
  }
}

// Inputs
message InitializeInput {
  SwapContractInfoList swap_contract_list = 1;
  aelf.Address admin = 2;
}

message AddSwapContractInfoInput {
  SwapContractInfoList swap_contract_list = 1;
}

message RemoveSwapContractInfoInput {
  repeated int64 fee_rates = 1;
}

message SetLimitOrderConfigInput {
  bool match_limit_order_enabled = 1;
  bool multi_swap_match_limit_order_enabled = 2;
  int32 max_fill_limit_order_count = 3;
}

message GetLimitOrderConfigOutput {
  bool match_limit_order_enabled = 1;
  bool multi_swap_match_limit_order_enabled = 2;
  int32 max_fill_limit_order_count = 3;
}

message SwapContractInfo {
  int64 fee_rate = 1;
  aelf.Address swap_contract_address = 2;
  aelf.Address lp_token_contract_address = 3;
}

message SwapContractInfoList {
  repeated SwapContractInfo swap_contracts = 1;
}

message GetSwapContractListOutput {
    SwapContractInfoList swap_contract_list = 1;
}

message CreatePairInput {
  string symbol_pair = 1;
  int64 fee_rate = 2;
}

message AddLiquidityInput {
  string symbol_a = 1;
  string symbol_b = 2;
  int64 amount_a_desired = 3;
  int64 amount_b_desired = 4;
  int64 amount_a_min = 5;
  int64 amount_b_min = 6;
  aelf.Address to = 7;
  google.protobuf.Timestamp deadline = 8;
  string channel = 9;
  int64 fee_rate = 10;
}

message RemoveLiquidityInput {
  string symbol_a = 1;
  string symbol_b = 2;
  int64 amount_a_min = 3;
  int64 amount_b_min = 4;
  int64 liquidity_remove = 5;
  aelf.Address to = 6;
  google.protobuf.Timestamp deadline = 7;
  int64 fee_rate = 8;
}

message SwapExactTokensForTokensInput {
  repeated SwapExactTokensForTokens swap_tokens = 1;
  int32 labs_fee_rate = 2;
}

message SwapExactTokensForTokens {
  int64 amount_in = 1;
  int64 amount_out_min = 2;
  repeated string path = 3;
  aelf.Address to = 4;
  google.protobuf.Timestamp deadline = 5;
  string channel = 6;
  repeated int64 fee_rates = 7;
}

message SwapTokensForExactTokensInput {
  repeated SwapTokensForExactTokens swap_tokens = 1;
  int32 labs_fee_rate = 2;
}

message SwapTokensForExactTokens {
  int64 amount_out = 1;
  int64 amount_in_max = 2;
  repeated string path = 3;
  aelf.Address to = 4;
  google.protobuf.Timestamp deadline = 5;
  string channel = 6;
  repeated int64 fee_rates = 7;
}

message GetAllReverseInput {
  string symbol_a = 1;
  string symbol_b = 2;
}

// Outputs
message AddLiquidityOutput {
  string symbol_a = 1;
  string symbol_b = 2;
  int64 amount_a = 3;
  int64 amount_b = 4;
  int64 liquidity_token = 5;
}

message RemoveLiquidityOutput {
  int64 amount_a = 1;
  int64 amount_b = 2;
  string symbol_a = 3;
  string symbol_b = 4;
}

message GetAmountsOutInput {
  int64 amount_in= 1;
  repeated string path = 2;
  repeated int64 fee_rates = 3;
}

message GetAmountsInInput {
  int64 amount_out= 1;
  repeated string path = 2;
  repeated int64 fee_rates = 3;
}

message GetAmountsOutOutput{
  repeated int64 amount = 1;
}

message GetAmountsInOutput{
  repeated int64 amount = 1;
}

message GetAllReverseOutput {
  repeated Reverse reverses = 1;
}

message Reverse {
  int64 fee_rate = 1;
  string symbol_a = 2;
  string symbol_b = 3;
  int64 reverse_a = 4;
  int64 reverse_b = 5;
}

//event
message HooksTransactionCreated{
  option (aelf.is_event) = true;
  aelf.Address sender = 1 [(aelf.is_indexed) = true];
  string method_name = 2 [(aelf.is_indexed) = true];
  bytes args = 3;
}

message LabsFeeCharged{
  option (aelf.is_event) = true;
  aelf.Address address = 1;
  string symbol = 2;
  int64 amount = 3;
  aelf.Address feeTo = 4;
}

